{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","id","name","email","className","src","alt","CardList","robots","map","user","SearchBox","searchChange","type","placeholder","onChange","Scroll","children","style","overflowY","border","height","ErrorBoundary","props","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchField","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAkBeA,EAfF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,sBACEF,GAAIA,EACJG,UAAU,uDAFZ,UAIE,qBAAKC,IAAG,+BAA0BJ,EAA1B,YAAwCK,IAAI,WACpD,gCACE,6BAAKJ,IACL,4BAAIC,WCuBGI,EAjCE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAgBlB,OACE,mCAEGA,EAAOC,KAAI,SAACC,GACX,OACE,cAAC,EAAD,CAEET,GAAIS,EAAKT,GACTC,KAAMQ,EAAKR,KACXC,MAAOO,EAAKP,OAJd,gBACgBO,EAAKT,WCXhBU,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,qBAAKR,UAAU,MAAf,SACE,uBACEA,UAAU,gCACVS,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCOHI,EAdA,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAChB,OACE,qBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,SAJZ,SAOGJ,KCcQK,E,kDApBb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,UAAU,GAHK,E,qDAOnB,YAAmC,EAAfC,MAAe,EAARC,KACzBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG5B,WACE,OAAIG,KAAKJ,MAAMC,SACN,0DAEAG,KAAKL,MAAMN,a,GAhBIa,aC2FbC,G,wDAlFb,aAAe,IAAD,8BACZ,gBAcFC,eAAiB,SAACC,GAEhB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAf1C,EAAKZ,MAAQ,CACXhB,OAAQ,GACR0B,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKZ,SAAS,CAAErB,OAAQiC,S,oBAuB7C,WAAU,IAAD,EACyBb,KAAKJ,MAA7BhB,EADD,EACCA,OAAQ0B,EADT,EACSA,YACVQ,EAAiBlC,EAAOmC,QAAO,SAACC,GACpC,OAAOA,EAAM1C,KAAK2C,cAAcC,SAASZ,EAAYW,kBAkBvD,OAAQrC,EAAOuC,OAGb,sBAAK3C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWQ,aAAcgB,KAAKI,iBAE9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUxB,OAAQkC,WARxB,gD,GAzDYZ,cCEHkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCIdO,IAASC,OACP,cAAC,IAAMC,WAAP,UAOE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6548e682.chunk.js","sourcesContent":["// new react version dont need include react import\n// import React from 'react';\n\nconst Card = ({ id, name, email }) => {\n  return (\n    <div\n      id={id}\n      className=\"tc bg-light-green dib br3 pa3 ma2 grow bw-2 shadow-5\"\n    >\n      <img src={`https://robohash.org/${id}?200x200`} alt=\"robots\" />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import Card from './Card';\n\nconst CardList = ({ robots }) => {\n  // testing ErrorBoundary\n  // if (true) {\n  //   throw new Error('Noooooo');\n  // }\n\n  // const cardArray = robots.map((user) => {\n  //   return (\n  //     <Card\n  //       key={`robot-${user.id}`}\n  //       id={user.id}\n  //       name={user.name}\n  //       email={user.email}\n  //     />\n  //   );\n  // });\n  return (\n    <>\n      {/* {cardArray} */}\n      {robots.map((user) => {\n        return (\n          <Card\n            key={`robot-${user.id}`}\n            id={user.id}\n            name={user.name}\n            email={user.email}\n          />\n        );\n      })}\n    </>\n  );\n};\n\nexport default CardList;\n","const SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder=\"search robots\"\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","const Scroll = ({ children }) => {\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        border: '5px solid black',\n        height: '800px',\n      }}\n    >\n      {children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch({ error, info }) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oooops. That is not good</h1>;\n    } else {\n      return this.props.children;\n    }\n  }\n}\n\nexport default ErrorBoundary;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\n\nimport './App.css';\n\n// import { robots } from './robots';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      robots: [],\n      searchField: '',\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((users) => this.setState({ robots: users }));\n  }\n\n  // course function\n  onSearchChange = (event) => {\n    // console.log(event.target.value);\n    this.setState({ searchField: event.target.value });\n    // const filteredRobots = this.state.robots.filter((robot) => {\n    //   return robot.name\n    //     .toLowerCase()\n    //     .includes(this.state.searchField.toLowerCase());\n    // });\n    // console.log(filteredRobots);\n  };\n\n  // My own function\n  // onSearchChange = (event) => {\n  //   const filteredRobots = robots.filter((robot) => {\n  //     return robot.name.toLowerCase().includes(event.target.value.toLowerCase());\n  //   });\n  //   this.setState({robots : filteredRobots});\n  // };\n\n  render() {\n    const { robots, searchField } = this.state;\n    const filteredRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    // if (robots.length === 0) {\n    //   return <h1>Loading...</h1>;\n    // } else {\n    //   return (\n    //     <div className=\"tc\">\n    //       <h1 className=\"f1\">RoboFriends</h1>\n    //       <SearchBox searchChange={this.onSearchChange} />\n    //       {/* <CardList robots={this.state.robots} /> */}\n    //       <Scroll>\n    //         <CardList robots={filteredRobots} />\n    //       </Scroll>\n    //     </div>\n    //   );\n    // }\n\n    return !robots.length ? (\n      <h1>Loading...</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox searchChange={this.onSearchChange} />\n        {/* <CardList robots={this.state.robots} /> */}\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\n// const App = () => {\n//   return (\n//     <div className=\"tc\">\n//       <h1>RoboFriends</h1>\n//       <SearchBox />\n//       <CardList robots={robots} />\n//     </div>\n//   );\n// };\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n// import Hello from './Hello';\n// import Card from './Card';\n// import CardList from './CardList';\n// import { robots } from './robots';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* <App /> */}\n    {/* <Hello greeting={'Hello' + 'React Ninja'} /> */}\n    {/* <Card id={robots[0].id} name={robots[0].name} email={robots[0].email} />\n    <Card id={robots[1].id} name={robots[1].name} email={robots[1].email} />\n    <Card id={robots[2].id} name={robots[2].name} email={robots[2].email} /> */}\n    {/* <CardList robots={robots} /> */}\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}